1.Match


import java.util.Scanner;

public class test{
	
   public static void main(String[] args){
	   
	   Scanner sc = new Scanner(System.in);
			  
	   System.out.println("Enter the Shape");
	   
	   String shape = sc.nextLine();
	   
	   int radius,length;
	   

	   if(shape == "Circle") {
		   
		   System.out.println("Enter the Radius");
		   
		   radius = sc.nextInt();
		   
		   Shape c = new Circle(radius);
		   
		   System.out.println("Circle Area is " + c.calculateArea());
		   
		   }
	   
	   else {
		   
		   System.out.println("Enter the dimensions");
		
		   length = sc.nextInt();
		
		   Shape s = new Square(length);

		   System.out.println("Square Area is " + s.calculateArea());
	   }
	   

	   
  }
}


abstract public class Shape {
	
	   // Private member variable
	   protected int value;
	   
	
	   
	  abstract public double calculateArea();
	}

public class Circle extends Shape{
	
	   // private instance variables
	   private double radius;

	
	   public Circle(double radius) {
	      this.radius = radius;
	      System.out.println("Construced a Circle with Circle(radius)");  // for debugging
	   }
	  
	   // public getters and setters for the private variables
	   public double getRadius() {
	      return this.radius;
	   }
	   
	   public void setRadius(double radius) {
	      this.radius = radius;
	   }
	  

	 
 public double calculateArea() {
	
	 return radius * radius * Math.PI;
		
	}

}


public class Square extends Shape{
	
	private int l;
	
	public Square(int l) {
		
		this.l = l;
		
		
	}
	
	//setter
	
	public void setDimensions(int l) {
		
		this.l = l;

	  
	}
	  
	//getter
	
	public int getLength() {
		
		return this.l;
	}

	public double calculateArea() {
		
		 return l*l;
			
		}

}
 
 




2. Match

import java.util.*;
abstract class Match{	
int currentscore;	
Float currentover;	
int target; 	
public void setScore(int val)	{		
currentscore=val;	} 	
public void setOver(Float val)	{		
currentover=val;	} 	
public void setTarget(int val)	{		
target=val;	} 	public int getScore()	{		
return currentscore;	} 
public Float getOver()	{		
return currentover;	} 
public int getTarget()	{	
return target;	} 
public abstract Float calculateRunRate();	
public abstract int calculateBalls();
public abstract void display(Float reqRunrate, int balls);}
class ODImatch extends Match{
Float over;
public Float calculateRunRate() {
int rscore = super.getScore() - super.getTarget(); 
Float over = super.getOver() - 50; 
return rscore/over; }
public int calculateBalls() { 	
Float over = 50 - super.getOver(); 
int balls = (int)(over*6); 
return balls; }
public void display(Float rr, int balls){
int rscore =super.getTarget() - super.getScore(); 
System.out.println("Need "+rscore+" runs in "+balls+" balls"); 
System.out.println("Required run rate: "+rr); 
}} class T20match extends Match{public Float calculateRunRate() { 
int rscore = super.getScore() - super.getTarget();
Float over = super.getOver() - 20;
return rscore/over; } 
public int calculateBalls() { 	
Float over = 20 - super.getOver(); 
int balls = (int)(over*6); return balls; }
public void display(Float rr, int balls){ 
int rscore =super.getTarget() - super.getScore(); 
System.out.println("Need "+rscore+" runs in "+balls+" balls"); 
System.out.println("Required run rate: "+rr); }} 
class TestMatch extends Match{	
public Float calculateRunRate() {
int rscore = super.getScore() - super.getTarget();
Float over = super.getOver() - 90;
return rscore/over;
}
public int calculateBalls() { 	
Float over = 90 - super.getOver();
int balls = (int)(over*6); return balls; }
public void display(Float rr, int balls){ 
int rscore =super.getTarget() - super.getScore(); 	
System.out.println("Need "+rscore+" runs in "+balls+" balls"); 
System.out.println("Required run rate: "+rr); 
}
